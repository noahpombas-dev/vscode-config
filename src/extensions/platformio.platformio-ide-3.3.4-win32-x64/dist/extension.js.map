{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://platformio-ide/webpack/bootstrap","webpack://platformio-ide/webpack/runtime/compat get default export","webpack://platformio-ide/webpack/runtime/define property getters","webpack://platformio-ide/webpack/runtime/hasOwnProperty shorthand","webpack://platformio-ide/webpack/runtime/make namespace object","webpack://platformio-ide/./src/constants.js","webpack://platformio-ide/external commonjs2 \"vscode\"","webpack://platformio-ide/external commonjs2 \"platformio-node-helpers\"","webpack://platformio-ide/external commonjs2 \"platformio-vscode-debug\"","webpack://platformio-ide/external node-commonjs \"os\"","webpack://platformio-ide/./src/utils.js","webpack://platformio-ide/external node-commonjs \"fs\"","webpack://platformio-ide/external node-commonjs \"path\"","webpack://platformio-ide/./src/project/helpers.js","webpack://platformio-ide/./src/home.js","webpack://platformio-ide/external commonjs2 \"fs-plus\"","webpack://platformio-ide/./src/installer/python-prompt.js","webpack://platformio-ide/./src/installer/manager.js","webpack://platformio-ide/./src/release-notes.js","webpack://platformio-ide/./src/terminal.js","webpack://platformio-ide/./src/toolbar.js","webpack://platformio-ide/./src/project/config.js","webpack://platformio-ide/./src/project/task-tree.js","webpack://platformio-ide/./src/project/tasks.js","webpack://platformio-ide/./src/project/tests.js","webpack://platformio-ide/./src/project/manager.js","webpack://platformio-ide/./src/views/quick-access-tree.js","webpack://platformio-ide/./src/main.js","webpack://platformio-ide/./src/misc.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nexport const IS_WINDOWS = process.platform.startsWith('win');\nexport const IS_OSX = process.platform == 'darwin';\nexport const IS_LINUX = !IS_WINDOWS && !IS_OSX;\nexport const PIO_CORE_VERSION_SPEC = '>=6.1.6';\nexport const STATUS_BAR_PRIORITY_START = 10;\nexport const CONFLICTED_EXTENSION_IDS = [\n  'llvm-vs-code-extensions.vscode-clangd',\n  'vsciot-vscode.vscode-arduino',\n  'vscode-openapi',\n];\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"vscode\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"platformio-node-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"platformio-vscode-debug\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"os\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport os from 'os';\nimport vscode from 'vscode';\n\nexport function disposeSubscriptions(subscriptions) {\n  while (subscriptions.length) {\n    subscriptions.pop().dispose();\n  }\n}\n\nexport async function notifyError(title, err) {\n  const description = err.stack || err.toString();\n  const ghbody = `# Description of problem\n  Leave a comment...\n\n  BEFORE SUBMITTING, PLEASE SEARCH FOR DUPLICATES IN\n  - https://github.com/platformio/platformio-vscode-ide/issues?q=is%3Aissue+\n\n  # Configuration\n\n  VSCode: ${vscode.version}\n  PIO IDE: v${getIDEVersion()}\n  System: ${os.type()}, ${os.release()}, ${os.arch()}\n\n  # Exception\n  \\`\\`\\`\n  ${description}\n  \\`\\`\\`\n  `;\n  const reportUrl = pioNodeHelpers.misc.getErrorReportUrl(title, ghbody);\n\n  let action = 'Report a problem';\n  if (!reportUrl.includes('issues/new')) {\n    action = 'Check available solutions';\n  }\n\n  const selected = await vscode.window.showErrorMessage(\n    description.substring(0, 700) + '...',\n    action,\n  );\n  if (selected === action) {\n    vscode.commands.executeCommand('vscode.open', vscode.Uri.parse(reportUrl));\n  }\n  console.error(err);\n}\n\nexport function getIDEManifest() {\n  return vscode.extensions.getExtension('platformio.platformio-ide').packageJSON;\n}\n\nexport function getIDEVersion() {\n  return getIDEManifest().version;\n}\n\nexport async function listCoreSerialPorts() {\n  const script = `\nimport json\nfrom platformio.public import list_serial_ports\n\nprint(json.dumps(list_serial_ports()))\n    `;\n  const output = await pioNodeHelpers.core.getCorePythonCommandOutput(['-c', script]);\n  return JSON.parse(output.trim()).map((item) => {\n    for (const key of ['description', 'hwid']) {\n      if (item[key] === 'n/a') {\n        item[key] = undefined;\n      }\n    }\n    return item;\n  });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { extension } from '../main';\nimport fs from 'fs';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport function isPIOProjectSync(projectDir) {\n  try {\n    fs.accessSync(path.join(projectDir, 'platformio.ini'));\n    return true;\n  } catch (err) {}\n  return false;\n}\n\nexport function getPIOProjectDirs() {\n  return (vscode.workspace.workspaceFolders || [])\n    .map((folder) => folder.uri.fsPath)\n    .filter((projectDir) => isPIOProjectSync(projectDir));\n}\n\nexport function getActiveEditorProjectDir() {\n  const pioProjectDirs = getPIOProjectDirs();\n  if (pioProjectDirs.length < 1) {\n    return undefined;\n  }\n  const editor = vscode.window.activeTextEditor;\n  if (!editor) {\n    return undefined;\n  }\n  const resource = editor.document.uri;\n  if (resource.scheme !== 'file') {\n    return undefined;\n  }\n  const folder = vscode.workspace.getWorkspaceFolder(resource);\n  if (!folder || !isPIOProjectSync(folder.uri.fsPath)) {\n    // outside workspace\n    return undefined;\n  }\n  return folder.uri.fsPath;\n}\n\nexport function getProjectItemState(projectDir, key) {\n  const state = extension.context.globalState.get('projects', {})[projectDir];\n  return (state || {})[key];\n}\n\nexport function updateProjectItemState(projectDir, key, value) {\n  const projects = extension.context.globalState.get('projects', {});\n  if (!projects[projectDir]) {\n    projects[projectDir] = {};\n  }\n  projects[projectDir][key] = value;\n\n  // cleanup removed project\n  for (const item of Object.keys(projects)) {\n    if (!isPIOProjectSync(item)) {\n      delete projects[item];\n    }\n  }\n\n  extension.context.globalState.update('projects', projects);\n  extension.context.globalState.update('lastProjectDir', projectDir);\n}\n\nexport function getLastProjectDir() {\n  return extension.context.globalState.get('lastProjectDir');\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { disposeSubscriptions, notifyError } from './utils';\nimport { getPIOProjectDirs, updateProjectItemState } from './project/helpers';\nimport { IS_OSX } from './constants';\nimport { extension } from './main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class PIOHome {\n  static defaultStartUrl = '/';\n\n  constructor() {\n    this.subscriptions = [];\n    this._currentPanel = undefined;\n    this._lastStartUrl = PIOHome.defaultStartUrl;\n\n    // close PIO Home when workspaces folders are changed (VSCode reactivates extensiuon)\n    this.subscriptions.push(\n      vscode.workspace.onDidChangeWorkspaceFolders(this.disposePanel.bind(this)),\n    );\n  }\n\n  static async shutdownAllServers() {\n    await pioNodeHelpers.home.shutdownServer();\n    await pioNodeHelpers.home.shutdownAllServers();\n  }\n\n  onPanelDisposed() {\n    this._currentPanel = undefined;\n  }\n\n  disposePanel() {\n    if (!this._currentPanel) {\n      return;\n    }\n    this._currentPanel.dispose();\n    this._currentPanel = undefined;\n  }\n\n  dispose() {\n    pioNodeHelpers.home.shutdownServer();\n    this.disposePanel();\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async toggle(startUrl = PIOHome.defaultStartUrl) {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n    try {\n      if (this._currentPanel) {\n        if (this._lastStartUrl !== startUrl) {\n          this._currentPanel.webview.html = await this.getWebviewContent(startUrl);\n        }\n        return this._currentPanel.reveal(column);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    this._currentPanel = await this.newPanel(startUrl);\n  }\n\n  async newPanel(startUrl) {\n    const panel = vscode.window.createWebviewPanel(\n      'pioHome',\n      extension.getEnterpriseSetting('pioHomeTitle', 'PIO Home'),\n      vscode.ViewColumn.One,\n      {\n        enableScripts: true,\n        retainContextWhenHidden: true,\n      },\n    );\n    this.subscriptions.push(panel.onDidDispose(this.onPanelDisposed.bind(this)));\n    panel.iconPath = vscode.Uri.file(\n      path.join(\n        extension.context.extensionPath,\n        'assets',\n        'images',\n        'platformio-mini-logo.svg',\n      ),\n    );\n    panel.webview.html = this.getLoadingContent();\n    try {\n      panel.webview.html = await this.getWebviewContent(startUrl);\n    } catch (err) {\n      if (!err.toString().includes('Webview is disposed')) {\n        notifyError('Start PIO Home Server', err);\n      }\n    }\n    return panel;\n  }\n\n  getTheme() {\n    const workbench = vscode.workspace.getConfiguration('workbench') || {};\n    return (workbench.colorTheme || '').toLowerCase().includes('light')\n      ? 'light'\n      : 'dark';\n  }\n\n  getLoadingContent() {\n    const theme = this.getTheme();\n    return `<!DOCTYPE html>\n    <html lang=\"en\">\n    <body style=\"background-color: ${theme === 'light' ? '#FFF' : '#1E1E1E'}\">\n      <div style=\"padding: 15px;\">Loading...</div>\n    </body>\n    </html>`;\n  }\n\n  async getWebviewContent(startUrl) {\n    this._lastStartUrl = startUrl;\n    await pioNodeHelpers.home.ensureServerStarted({\n      port: extension.getConfiguration('pioHomeServerHttpPort'),\n      host: extension.getConfiguration('pioHomeServerHttpHost'),\n      onIDECommand: await this.onIDECommand.bind(this),\n    });\n    const theme = this.getTheme();\n    const iframeId = `pioHomeIFrame-${vscode.env.sessionId}`;\n    const iframeScript = `\n<script>\n  function execCommand(data) {\n    document.getElementById('${iframeId}').contentWindow.postMessage({'command': 'execCommand', 'data': data}, '*');\n  }\n  for (const command of ['copy', 'paste', 'cut']) {\n    document.addEventListener(command, (e) => {\n      execCommand(command);\n    });\n  }\n  document.addEventListener('selectstart', (e) => {\n    execCommand('selectAll');\n    e.preventDefault();\n  });\n  window.addEventListener('keydown', (e) => {\n    if (e.key === 'z' && e.metaKey) {\n      execCommand(e.shiftKey ? 'redo' : 'undo');\n    }\n  });\n  window.addEventListener('message', (e) => {\n    if (e.data.command === 'kbd-event') {\n      window.dispatchEvent(new KeyboardEvent('keydown', e.data.data));\n    }\n  });\n</script>\n  `;\n    return `<!DOCTYPE html>\n      <html lang=\"en\">\n      <head>${IS_OSX ? iframeScript : ''}</head>\n      <body style=\"margin: 0; padding: 0; height: 100%; overflow: hidden; background-color: ${\n        theme === 'light' ? '#FFF' : '#1E1E1E'\n      }\">\n        <iframe id=\"${iframeId}\" src=\"${pioNodeHelpers.home.getFrontendUrl({\n          start: startUrl,\n          theme,\n          workspace: extension.getEnterpriseSetting('defaultPIOHomeWorkspace'),\n        })}\"\n          width=\"100%\"\n          height=\"100%\"\n          frameborder=\"0\"\n          style=\"border: 0; left: 0; right: 0; bottom: 0; top: 0; position:absolute;\" />\n      </body>\n      </html>\n    `;\n  }\n\n  async onIDECommand(command, params) {\n    switch (command) {\n      case 'open_project':\n        return this.onOpenProjectCommand(params);\n      case 'open_text_document':\n        return await this.onOpenTextDocumentCommand(params);\n      case 'get_pio_project_dirs':\n        return this.onGetPIOProjectDirs();\n    }\n  }\n\n  onOpenProjectCommand(params) {\n    if (extension.projectManager) {\n      updateProjectItemState(vscode.Uri.file(params).fsPath, 'selectedEnv', undefined);\n      extension.projectManager.switchToProject(vscode.Uri.file(params).fsPath, {\n        force: true,\n      });\n    }\n    this.disposePanel();\n    if (vscode.workspace.workspaceFolders) {\n      vscode.workspace.updateWorkspaceFolders(\n        vscode.workspace.workspaceFolders.length,\n        null,\n        { uri: vscode.Uri.file(params) },\n      );\n    } else {\n      vscode.commands.executeCommand('vscode.openFolder', vscode.Uri.file(params));\n    }\n    vscode.commands.executeCommand('workbench.view.explorer');\n    return true;\n  }\n\n  async onOpenTextDocumentCommand(params) {\n    const editor = await vscode.window.showTextDocument(vscode.Uri.file(params.path));\n    const gotoPosition = new vscode.Position(\n      (params.line || 1) - 1,\n      (params.column || 1) - 1,\n    );\n    editor.selection = new vscode.Selection(gotoPosition, gotoPosition);\n    editor.revealRange(\n      new vscode.Range(gotoPosition, gotoPosition),\n      vscode.TextEditorRevealType.InCenter,\n    );\n    return true;\n  }\n\n  onGetPIOProjectDirs() {\n    return getPIOProjectDirs();\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs-plus\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport fs from 'fs-plus';\nimport vscode from 'vscode';\n\nexport default class PythonPrompt {\n  STATUS_TRY_AGAIN = 0;\n  STATUS_ABORT = 1;\n  STATUS_CUSTOMEXE = 2;\n\n  async prompt() {\n    const selectedItem = await vscode.window.showInformationMessage(\n      'PlatformIO: Can not find working Python 3.6+ Interpreter. Please install the latest Python 3 and restart VSCode',\n      { title: 'Install Python', isCloseAffordance: false },\n      { title: 'I have Python', isCloseAffordance: false },\n      { title: 'Try again', isCloseAffordance: false },\n      { title: 'Abort PlatformIO IDE Installation', isCloseAffordance: true },\n    );\n\n    let result = { status: this.STATUS_TRY_AGAIN };\n    let pythonExecutable = undefined;\n    switch (selectedItem ? selectedItem.title : undefined) {\n      case 'Install Python':\n        vscode.commands.executeCommand(\n          'vscode.open',\n          vscode.Uri.parse(\n            'https://docs.platformio.org/en/latest/faq/install-python.html',\n          ),\n        );\n        break;\n      case 'I have Python':\n        pythonExecutable = await vscode.window.showInputBox({\n          prompt: 'Please specify a full path to Python executable file',\n          placeHolder: 'Full path to python/python.exe',\n          validateInput: (value) =>\n            !fs.isFileSync(value) ? 'Invalid path to Python Interpreter' : null,\n        });\n        if (pythonExecutable) {\n          result = {\n            status: this.STATUS_CUSTOMEXE,\n            pythonExecutable,\n          };\n        }\n        break;\n      case 'Abort PlatformIO IDE Installation':\n        result = { status: this.STATUS_ABORT };\n        break;\n    }\n\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport PIOHome from '../home';\nimport { PIO_CORE_VERSION_SPEC } from '../constants';\nimport PythonPrompt from './python-prompt';\nimport { extension } from '../main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class InstallationManager {\n  LOCK_TIMEOUT = 1 * 60 * 1000; // 1 minute\n  LOCK_KEY = 'installer-lock';\n\n  constructor(disableAutoUpdates = false) {\n    const config = vscode.workspace.getConfiguration('platformio-ide');\n    this.stages = [\n      new pioNodeHelpers.installer.PlatformIOCoreStage(\n        {\n          getValue: (key) => extension.context.globalState.get(key),\n          setValue: (key, value) => extension.context.globalState.update(key, value),\n        },\n        this.onDidStatusChange.bind(this),\n        {\n          pioCoreVersionSpec: PIO_CORE_VERSION_SPEC,\n          useBuiltinPython: config.get('useBuiltinPython'),\n          useBuiltinPIOCore: config.get('useBuiltinPIOCore'),\n          useDevelopmentPIOCore: config.get('useDevelopmentPIOCore'),\n          pythonPrompt: new PythonPrompt(),\n          disableAutoUpdates: disableAutoUpdates,\n          predownloadedPackageDir: path.join(\n            extension.context.extensionPath,\n            'assets',\n            'predownloaded',\n          ),\n        },\n      ),\n    ];\n  }\n\n  onDidStatusChange() {\n    // increase lock timeout on each stage update\n    if (this.locked()) {\n      this.lock();\n    }\n  }\n\n  lock() {\n    return extension.context.globalState.update(this.LOCK_KEY, new Date().getTime());\n  }\n\n  unlock() {\n    return extension.context.globalState.update(this.LOCK_KEY, undefined);\n  }\n\n  locked() {\n    const lockTime = extension.context.globalState.get(this.LOCK_KEY);\n    if (!lockTime) {\n      return false;\n    }\n    return new Date().getTime() - parseInt(lockTime) <= this.LOCK_TIMEOUT;\n  }\n\n  async check() {\n    let result = true;\n    for (const stage of this.stages) {\n      try {\n        if (!(await stage.check())) {\n          result = false;\n        }\n      } catch (err) {\n        result = false;\n        console.warn(err);\n      }\n    }\n    return result;\n  }\n\n  async install(progress) {\n    const stageIncrementTotal = 100 / this.stages.length;\n    // shutdown all PIO Home servers which block python.exe on Windows\n    await PIOHome.shutdownAllServers();\n    for (const stage of this.stages) {\n      await stage.install((message, increment) => {\n        progress.report({\n          message,\n          increment: stageIncrementTotal * (increment / 100),\n        });\n      });\n    }\n    progress.report({ message: 'Finished! Please restart VSCode.', increment: 100 });\n  }\n\n  destroy() {\n    return this.stages.map((stage) => stage.destroy());\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { disposeSubscriptions } from './utils';\nimport { extension } from './main';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class PIOReleaseNotes {\n  constructor() {\n    this.version = extension.context.extension.packageJSON.version;\n    this._currentPanel = undefined;\n\n    this.subscriptions = [\n      vscode.commands.registerCommand('platformio-ide.showReleaseNotes', () =>\n        this.toggle(),\n      ),\n    ];\n\n    const stateKey = 'showedReleaseNotesFor';\n    if (extension.context.globalState.get(stateKey) !== this.version) {\n      extension.context.globalState.update(stateKey, this.version);\n      this.toggle();\n    }\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async toggle() {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n    try {\n      if (this._currentPanel) {\n        this._currentPanel.webview.html = await this.getWebviewContent();\n        return this._currentPanel.reveal(column);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    this._currentPanel = await this.newPanel();\n  }\n\n  async newPanel() {\n    const panel = vscode.window.createWebviewPanel(\n      'pioReleaseNotes',\n      'PlatformIO IDE: Release Notes',\n      vscode.ViewColumn.One,\n      {\n        enableScripts: true,\n        retainContextWhenHidden: true,\n      },\n    );\n    panel.iconPath = vscode.Uri.file(\n      path.join(\n        extension.context.extensionPath,\n        'assets',\n        'images',\n        'platformio-mini-logo.svg',\n      ),\n    );\n    panel.onDidDispose(\n      () => (this._currentPanel = undefined),\n      undefined,\n      this.subscriptions,\n    );\n    const logoSrc = panel.webview.asWebviewUri(\n      vscode.Uri.file(\n        path.join(\n          extension.context.extensionPath,\n          'assets',\n          'images',\n          'platformio-logo.png',\n        ),\n      ),\n    );\n    panel.webview.html = await this.getWebviewContent(logoSrc);\n    return panel;\n  }\n\n  async getWebviewContent(logoSrc) {\n    const releaseNotes = await this.readReleaseNotes();\n    return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>PlatformIO IDE: Release Notes</title>\n  <style>ul { padding-top: 5px; } li { padding-bottom: 4px; }</style>\n</head>\n<body>\n  <table border=\"0\">\n  <tr>\n    <td><img src=\"${logoSrc}\" width=\"28px\" height=\"28px\"></td>\n    <td style=\"padding-left: 10px\"><h1>PlatformIO IDE Release Notes</h1></td>\n  </tr>\n  </table>\n  <div>\n    Welcome to the ${this.version} release of PlatformIO IDE.\n    There are many updates in this version that we hope you'll like.\n  </div>\n  <p>\n    <b>Release History</b>: Want to read release notes for the previous versions?\n    Please visit <a href=\"https://github.com/platformio/platformio-vscode-ide/blob/develop/CHANGELOG.md\">PlatformIO IDE Changelog</a>\n    for more detailed information.\n  </p>\n  <p id=\"content\">Loading...</p>\n  <h2>Stay in touch with us</h2>\n  <p>\n    Please follow us on <a href=\"https://www.linkedin.com/company/platformio\">LinkedIn</a> and Twitter <a href=\"https://twitter.com/PlatformIO_Org\">@PlatformIO_Org</a>\n    to keep up to date with the latest news, articles and tips!\n  </p>\n  <hr />\n  <p>\n    <b>PlatformIO Core</b>: If you would like to read the PlatformIO Core release notes,\n    go to the <a href=\"https://docs.platformio.org/en/latest/core/history.html\">Release Notes</a> on <a href=\"https://docs.platformio.org/\">docs.platformio.org</a>.\n  </p>\n  <textarea id=\"pioRNMarkdown\" hidden=\"hidden\">${releaseNotes}</textarea>\n  <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n  <script>\n    document.getElementById('content').innerHTML =\n      marked.parse(document.getElementById('pioRNMarkdown').value);\n  </script>\n</body>\n</html>`;\n  }\n\n  async readReleaseNotes() {\n    const changelogPath = path.join(extension.context.extensionPath, 'CHANGELOG.md');\n    try {\n      const contents = await fs.readFile(changelogPath, { encoding: 'utf-8' });\n      const startsAt = contents.indexOf('\\n## ');\n      return contents.substring(startsAt, contents.indexOf('\\n## ', startsAt + 3));\n    } catch (err) {\n      return err.toString();\n    }\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport vscode from 'vscode';\n\nexport default class PIOTerminal {\n  constructor() {\n    this._instance = undefined;\n  }\n\n  new() {\n    const envClone = Object.assign({}, process.env);\n    if (process.env.PLATFORMIO_PATH) {\n      envClone.PATH = process.env.PLATFORMIO_PATH;\n      envClone.Path = process.env.PLATFORMIO_PATH;\n    }\n    return vscode.window.createTerminal({\n      name: 'PlatformIO CLI',\n      env: envClone,\n    });\n  }\n\n  sendText(text) {\n    if (!this._instance || this._instance.exitStatus !== undefined) {\n      this._instance = this.new();\n    }\n    this._instance.sendText(text);\n    this._instance.show();\n  }\n\n  dispose() {\n    if (this._instance) {\n      this._instance.dispose();\n    }\n    this._instance = undefined;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { STATUS_BAR_PRIORITY_START } from './constants';\nimport { disposeSubscriptions } from './utils';\nimport { extension } from './main';\nimport vscode from 'vscode';\n\nclass ToolbarButton {\n  constructor(text, tooltip, commands) {\n    this.text = text;\n    this.tooltip = tooltip;\n    this.commands = ToolbarButtonCommands.from(commands);\n  }\n\n  createStatusBarItem(options = { priority: 0 }) {\n    const item = vscode.window.createStatusBarItem(\n      `pio-toolbar-${this.tooltip || this.text}`,\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START + options.priority + 1,\n    );\n    item.name = this.tooltip || 'PlatformIO: Toolbar Item';\n    item.text = this.text;\n    item.tooltip = this.tooltip;\n    item.command = {\n      title: this.tooltip,\n      command: PIOToolbar.RUN_BUTTON_COMMANDS_ID,\n      arguments: [this],\n    };\n    return item;\n  }\n}\n\nclass ToolbarButtonCommands {\n  constructor(id, args = undefined) {\n    this.id = id;\n    this.args = args;\n  }\n\n  static from(rawCommands) {\n    const result = [];\n    if (!rawCommands) {\n      return result;\n    }\n    if (!Array.isArray(rawCommands)) {\n      rawCommands = [rawCommands];\n    }\n    return rawCommands.map((item) =>\n      typeof item === 'object'\n        ? new ToolbarButtonCommands(item.id, item.args)\n        : new ToolbarButtonCommands(item),\n    );\n  }\n}\n\nexport default class PIOToolbar {\n  static RUN_BUTTON_COMMANDS_ID = 'platformio-ide.runToolbarButtonCommand';\n\n  constructor(options = { filterCommands: undefined, ignoreCommands: undefined }) {\n    this.options = options;\n    this.subscriptions = [];\n    this.show();\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  static getButtons() {\n    const items = extension.getConfiguration('toolbar') || [];\n    return items.map(\n      (item) =>\n        new ToolbarButton(\n          item.text,\n          item.tooltip,\n          ToolbarButtonCommands.from(item.commands),\n        ),\n    );\n  }\n\n  show() {\n    this.refresh();\n  }\n\n  refresh() {\n    this.dispose();\n    const buttons = PIOToolbar.getButtons().filter(\n      (button) =>\n        (!this.options.filterCommands ||\n          button.commands.some((cmd) =>\n            this.options.filterCommands.includes(cmd.id),\n          )) &&\n        (!this.options.ignoreCommands ||\n          !button.commands.some((cmd) => this.options.ignoreCommands.includes(cmd.id))),\n    );\n\n    buttons.forEach((button, index) => {\n      const sbItem = button.createStatusBarItem({ priority: buttons.length - index });\n      sbItem.show();\n      this.subscriptions.push(sbItem);\n    });\n\n    this.subscriptions.push(\n      vscode.workspace.onDidChangeConfiguration((e) =>\n        e.affectsConfiguration('platformio-ide.toolbar') ? this.refresh() : undefined,\n      ),\n      vscode.commands.registerCommand(\n        PIOToolbar.RUN_BUTTON_COMMANDS_ID,\n        this.onButtonClick.bind(this),\n      ),\n    );\n  }\n\n  async onButtonClick(button) {\n    for (const cmd of button.commands) {\n      let args = cmd.args || [];\n      if (!Array.isArray(args)) {\n        args = [args];\n      }\n      for (let i = 0; i < args.length; i++) {\n        args[i] = await this._expandArgVariables(args[i]);\n      }\n      await vscode.commands.executeCommand(cmd.id, ...args);\n    }\n  }\n\n  async _expandArgVariables(arg) {\n    if (!arg.includes('${')) {\n      return arg;\n    }\n    const matches = arg.match(/\\$\\{[^\\}]+\\}/g);\n    for (const match of matches) {\n      if (match.startsWith('${command:')) {\n        arg = arg.replace(\n          match,\n          await vscode.commands.executeCommand(match.substring(10, match.length - 1)),\n        );\n      }\n    }\n    return arg;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { disposeSubscriptions, listCoreSerialPorts } from '../utils';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport class ProjectConfigLanguageProvider {\n  static DOCUMENT_SELECTOR = { language: 'ini' };\n  SCOPE_PLATFORMIO = 'platformio';\n  SCOPE_ENV = 'env';\n\n  constructor() {\n    this.diagnosticCollection =\n      vscode.languages.createDiagnosticCollection('PlatformIO');\n    this.subscriptions = [\n      this.diagnosticCollection,\n      vscode.languages.registerHoverProvider(\n        ProjectConfigLanguageProvider.DOCUMENT_SELECTOR,\n        {\n          provideHover: async (document, position) =>\n            await this.provideHover(document, position),\n        },\n      ),\n      vscode.languages.registerCompletionItemProvider(\n        ProjectConfigLanguageProvider.DOCUMENT_SELECTOR,\n        {\n          provideCompletionItems: async (document, position, token, context) =>\n            await this.provideCompletionItems(document, position, token, context),\n        },\n      ),\n      vscode.workspace.onDidOpenTextDocument((document) =>\n        this.lintConfig(document.uri),\n      ),\n      vscode.workspace.onDidSaveTextDocument((document) =>\n        this.lintConfig(document.uri),\n      ),\n    ];\n    // if (vscode.languages.registerInlineCompletionItemProvider) {\n    //   this.subscriptions.push(\n    //     vscode.languages.registerInlineCompletionItemProvider(\n    //       ProjectConfigLanguageProvider.DOCUMENT_SELECTOR,\n    //       {\n    //         provideInlineCompletionItems: async (document, position) =>\n    //           await this.provideCompletionItems(document, position, true),\n    //       }\n    //     )\n    //   );\n    // }\n    this._optionsCache = new Map();\n    this._ports = undefined;\n\n    // vscode.window.visibleTextEditors.forEach((editor) =>\n    //   this.lintConfig(editor.document)\n    // );\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n    this._optionsCache.clear();\n    this.diagnosticCollection.clear();\n  }\n\n  /**\n   * Completion\n   */\n  async getOptions(document) {\n    const configPath = document.uri.fsPath;\n    if (this._optionsCache.has(configPath)) {\n      return this._optionsCache.get(configPath);\n    }\n    const script = `\nimport json\nfrom platformio.public import get_config_options_schema\n\nprint(json.dumps(get_config_options_schema()))\n  `;\n    const output = await pioNodeHelpers.core.getCorePythonCommandOutput(\n      ['-c', script],\n      { projectDir: path.dirname(configPath) },\n    );\n    this._optionsCache.set(configPath, JSON.parse(output));\n    return this._optionsCache.get(configPath);\n  }\n\n  renderOptionDocs(option) {\n    const attrs = [\n      ['Name', option.name],\n      ['Group', option.group],\n      ['Type', option.type],\n      ['Multiple', option.multiple ? 'yes' : 'no'],\n    ];\n    if (option.sysenvvar) {\n      attrs.push(['EnvironmentVariable', option.sysenvvar]);\n    }\n    if (option.type === 'choice') {\n      attrs.push(['Choices', option.choices.join(', ')]);\n    }\n    if (option.min !== undefined) {\n      attrs.push(['Minimum', option.min]);\n    }\n    if (option.max !== undefined) {\n      attrs.push(['Maximum', option.max]);\n    }\n    if (option.default !== null || option.type === 'boolean') {\n      let value = option.default;\n      if (option.type === 'boolean') {\n        value = option.default ? 'yes' : 'no';\n      } else if (option.multiple && Array.isArray(option.default)) {\n        value = option.default.join(', ');\n      }\n      attrs.push(['Default', value]);\n    }\n    const docs = new vscode.MarkdownString();\n    docs.appendCodeblock(\n      attrs.map(([name, value]) => `${name} = ${value}`).join('\\n'),\n      'ini',\n    );\n    docs.appendMarkdown(`\n${option.description}\n\n[View documentation](https://docs.platformio.org/en/latest/projectconf/sections/${option.scope}/options/${option.group}/${option.name}.html?utm_source=vscode&utm_medium=completion)\n`);\n    return docs;\n  }\n\n  getScopeAt(document, position) {\n    const text = document.getText(\n      new vscode.Range(new vscode.Position(0, 0), position),\n    );\n    for (const line of text.split('\\n').reverse()) {\n      if (line.startsWith('[platformio]')) {\n        return this.SCOPE_PLATFORMIO;\n      } else if (line.startsWith('[env]') || line.startsWith('[env:')) {\n        return this.SCOPE_ENV;\n      }\n    }\n    return undefined;\n  }\n\n  async getOptionAt(document, position) {\n    for (let lineNum = position.line; lineNum > 0; lineNum--) {\n      const line = document.lineAt(lineNum).text;\n      if (line.startsWith(' ') || line.startsWith('\\t')) {\n        continue;\n      }\n      const optionName = line.split('=')[0].trim();\n      return (await this.getOptions(document)).find(\n        (option) => option.name === optionName,\n      );\n    }\n  }\n\n  isOptionValueLocation(document, position) {\n    const line = document.lineAt(position.line).text;\n    const sepPos = line.indexOf('=');\n    return (\n      line.startsWith(' ') ||\n      line.startsWith('\\t') ||\n      (sepPos > 0 && position.character > sepPos)\n    );\n  }\n\n  async provideHover(document, position) {\n    const word = document.getText(document.getWordRangeAtPosition(position));\n    const option = (await this.getOptions(document)).find(\n      (option) => option.name === word,\n    );\n    if (option) {\n      return new vscode.Hover(this.renderOptionDocs(option));\n    }\n    return this.providePackageHover(document, position);\n  }\n\n  async providePackageHover(document, position) {\n    const line = document.lineAt(position.line).text;\n    let rawValue = undefined;\n    if (line.startsWith(' ') || line.startsWith('\\t')) {\n      rawValue = line;\n    } else if (line.includes('=')) {\n      rawValue = line.split('=', 2)[1];\n    }\n    if (!rawValue) {\n      return;\n    }\n    const pkgRegExp = /^(([a-z\\d_\\-]+)\\/)?([a-z\\d\\_\\- ]+)/i;\n    const matches = pkgRegExp.exec(rawValue.trim());\n    if (!matches) {\n      return;\n    }\n\n    const option = await this.getOptionAt(document, position);\n    if (!['platform', 'lib_deps'].includes(option.name)) {\n      return;\n    }\n\n    const pkgOwner = matches[2];\n    const pkgName = matches[3];\n    const pkgUrlParts = ['https://registry.platformio.org'];\n    if (pkgOwner) {\n      pkgUrlParts.push(option.name === 'platform' ? 'platforms' : 'libraries');\n      pkgUrlParts.push(pkgOwner.trim(), encodeURIComponent(pkgName.trim()));\n    } else {\n      const qs = new URLSearchParams();\n      qs.set('t', option.group);\n      qs.set('q', `name:\"${pkgName.trim()}\"`);\n      pkgUrlParts.push(`search?${qs.toString()}`);\n    }\n\n    return new vscode.Hover(\n      new vscode.MarkdownString(\n        `[Open in PlatformIO Registry](${pkgUrlParts.join('/')})`,\n      ),\n    );\n  }\n\n  async provideCompletionItems(document, position, token, context, isInline = false) {\n    if (token.isCancellationRequested) {\n      return;\n    }\n    return await (this.isOptionValueLocation(document, position)\n      ? this.provideCompletionValues(document, position, isInline)\n      : this.provideCompletionOptions(document, position, isInline));\n  }\n\n  async provideCompletionOptions(document, position, isInline = false) {\n    const scope = this.getScopeAt(document, position);\n    if (!scope) {\n      return;\n    }\n    const options = await this.getOptions(document);\n    return options\n      .filter((option) => option.scope === scope)\n      .map((option) => {\n        if (isInline) {\n          return new vscode.InlineCompletionItem(option.name);\n        }\n        const item = new vscode.CompletionItem(\n          option.name,\n          vscode.CompletionItemKind.Field,\n        );\n        item.documentation = this.renderOptionDocs(option);\n        return item;\n      });\n  }\n\n  async provideCompletionValues(document, position) {\n    const option = await this.getOptionAt(document, position);\n    if (!option) {\n      return;\n    }\n    switch (option.name) {\n      case 'upload_port':\n      case 'monitor_port':\n      case 'test_port':\n        return await this.provideCompletionPorts();\n\n      case 'upload_speed':\n      case 'monitor_speed':\n      case 'test_speed':\n        return await this.provideCompletionBaudrates(option);\n    }\n    return this.provideTypedCompletionValues(option);\n  }\n\n  async provideTypedCompletionValues(option) {\n    const values = [];\n    let defaultValue = option.default;\n    switch (option.type) {\n      case 'boolean':\n        values.push('yes', 'no');\n        defaultValue = option.default ? 'yes' : 'no';\n        break;\n      case 'choice':\n        option.choices.forEach((item) => values.push(item));\n        break;\n\n      case 'integer range':\n        for (let i = option.min; i <= option.max; i++) {\n          values.push(i);\n        }\n        break;\n    }\n    return values.map((value) => {\n      const item = new vscode.CompletionItem(\n        value.toString(),\n        vscode.CompletionItemKind.EnumMember,\n      );\n      item.preselect = defaultValue === value;\n      return item;\n    });\n  }\n\n  createCustomCompletionValueItem() {\n    const item = new vscode.CompletionItem('Custom', vscode.CompletionItemKind.Value);\n    item.insertText = '';\n    item.sortText = 'Z';\n    return item;\n  }\n\n  async provideCompletionPorts() {\n    if (!this._ports) {\n      this._ports = await listCoreSerialPorts();\n      setTimeout(() => (this._ports = undefined), 3000);\n    }\n    const items = (this._ports || []).map((port) => {\n      const item = new vscode.CompletionItem(\n        port.port,\n        vscode.CompletionItemKind.Value,\n      );\n      item.detail = port.description;\n      item.documentation = port.hwid;\n      return item;\n    });\n    items.push(this.createCustomCompletionValueItem());\n    return items;\n  }\n\n  async provideCompletionBaudrates(option) {\n    const values = [\n      600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200, 230400,\n    ];\n    const items = values.map((value, index) => {\n      const item = new vscode.CompletionItem(\n        value.toString(),\n        vscode.CompletionItemKind.Value,\n      );\n      item.sortText = String.fromCharCode(index + 65);\n      item.preselect = option.default === value;\n      return item;\n    });\n    items.push(this.createCustomCompletionValueItem());\n    return items;\n  }\n\n  /**\n   * Linting\n   */\n  async lintConfig(uri) {\n    // ignore non-platformio.ini docs\n    if (path.basename(uri.fsPath) !== 'platformio.ini') {\n      return;\n    }\n    const script = `\nimport json\n\nfrom platformio.public import ProjectConfig\n\nprint(json.dumps(ProjectConfig.lint()))\n  `;\n    this.diagnosticCollection.clear();\n    const projectDir = path.dirname(uri.fsPath);\n    const output = await pioNodeHelpers.core.getCorePythonCommandOutput(\n      ['-c', script],\n      { projectDir },\n    );\n    const { errors, warnings } = JSON.parse(output);\n    this.diagnosticCollection.set(\n      uri,\n      warnings.map(\n        (msg) =>\n          new vscode.Diagnostic(\n            new vscode.Range(0, 0, 0, 0),\n            msg,\n            vscode.DiagnosticSeverity.Warning,\n          ),\n      ),\n    );\n    const uriDiagnostics = new Map();\n    errors.forEach((data) => {\n      const sourceUri = data.source\n        ? vscode.Uri.file(\n            path.isAbsolute(data.source)\n              ? data.source\n              : path.join(projectDir, data.source),\n          )\n        : uri;\n      const diagnostics = uriDiagnostics.get(sourceUri.fsPath) || [];\n      diagnostics.push(\n        new vscode.Diagnostic(\n          new vscode.Range(data?.lineno - 1 || 0, 0, data?.lineno || 0, 0),\n          data.message,\n          vscode.DiagnosticSeverity.Error,\n        ),\n      );\n      uriDiagnostics.set(sourceUri.fsPath, diagnostics);\n    });\n    uriDiagnostics.forEach((diagnostics, fsPath) =>\n      this.diagnosticCollection.set(vscode.Uri.file(fsPath), diagnostics),\n    );\n    return !errors.length;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as vscode from 'vscode';\n\nexport default class ProjectTasksTreeProvider {\n  static DEFAULT_ENV_NAME = 'Default';\n\n  constructor(id, envs, tasks, selectedEnv = undefined, multiEnvExplorer = false) {\n    this.id = id;\n    this.envs = envs;\n    this.tasks = tasks;\n    this.selectedEnv = selectedEnv;\n    this.multiEnvProject = this.envs.length > 1;\n    this.multiEnvExplorer = multiEnvExplorer;\n  }\n\n  getEnvTasks(env = undefined, group = undefined) {\n    const cmpGroup = (task) => {\n      if (!group) {\n        return true;\n      }\n      return task.group === group;\n    };\n    const result = this.tasks.filter((task) => cmpGroup(task) && task.coreEnv === env);\n    // merge default/env-independent tasks\n    if (env) {\n      result.push(\n        ...this.tasks.filter(\n          (task) =>\n            cmpGroup(task) &&\n            env !== ProjectTasksTreeProvider.DEFAULT_ENV_NAME &&\n            !task.multienv,\n        ),\n      );\n    }\n    return result;\n  }\n\n  getTreeItem(item) {\n    return item instanceof vscode.TreeItem ? item : this.taskToTreeItem(item);\n  }\n\n  taskToTreeItem(task) {\n    const treeItem = new vscode.TreeItem(task.name);\n    treeItem.iconPath = new vscode.ThemeIcon('circle-outline');\n    treeItem.tooltip = task.title;\n    treeItem.command = {\n      title: task.title,\n      command: 'platformio-ide._runProjectTask',\n      arguments: [task],\n    };\n    if (!task.coreEnv && task.multienv && this.multiEnvProject) {\n      treeItem.label += ' All';\n    }\n    return treeItem;\n  }\n\n  getChildren(element) {\n    if (element && element.group) {\n      return this.getEnvTasks(element.env, element.group);\n    } else if (element) {\n      return this.getEnvChildren(element.env);\n    } else if (this.selectedEnv && !this.multiEnvExplorer) {\n      return this.getEnvChildren(this.selectedEnv);\n    }\n    return this.getRootChildren();\n  }\n\n  getRootChildren() {\n    const result = [];\n    for (const env of [undefined, ...this.envs]) {\n      const treeItem = new vscode.TreeItem(\n        env || ProjectTasksTreeProvider.DEFAULT_ENV_NAME,\n        env && (env === this.selectedEnv || !this.multiEnvProject)\n          ? vscode.TreeItemCollapsibleState.Expanded\n          : vscode.TreeItemCollapsibleState.Collapsed,\n      );\n      treeItem.id = `${this.id}-${env}`;\n      treeItem.env = env;\n      treeItem.iconPath = new vscode.ThemeIcon('root-folder');\n      result.push(treeItem);\n    }\n    return result;\n  }\n\n  getEnvChildren(env) {\n    const envTasks = this.getEnvTasks(env);\n    if (!envTasks.length) {\n      return [new vscode.TreeItem('Loading...')];\n    }\n    const result = envTasks.filter((task) => !task.group);\n    // root groups\n    for (const group of this.getTaskGroups(envTasks)) {\n      const element = new vscode.TreeItem(\n        group,\n        ['General', 'Platform'].includes(group)\n          ? vscode.TreeItemCollapsibleState.Expanded\n          : vscode.TreeItemCollapsibleState.Collapsed,\n      );\n      element.env = env;\n      element.group = group;\n      element.iconPath = vscode.ThemeIcon.Folder;\n      result.push(element);\n    }\n    return result;\n  }\n\n  getTaskGroups(tasks) {\n    const result = ['General'];\n    const candidates = tasks.filter((task) => task.group).map((task) => task.group);\n    // reorder\n    if (candidates.includes('Platform')) {\n      result.push('Platform');\n    }\n    for (const group of candidates) {\n      if (!result.includes(group)) {\n        result.push(group);\n      }\n    }\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { IS_WINDOWS, STATUS_BAR_PRIORITY_START } from '../constants';\nimport { disposeSubscriptions, listCoreSerialPorts } from '../utils';\nimport { getProjectItemState, updateProjectItemState } from './helpers';\nimport ProjectTasksTreeProvider from './task-tree';\nimport { extension } from '../main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectTaskManager {\n  static PROVIDER_TYPE = 'PlatformIO';\n  static TASKS_VIEW_ID = 'platformio-ide.projectTasks';\n  static AUTO_REFRESH_DELAY = 500; // 0.5 sec\n\n  constructor(projectDir, projectObserver) {\n    this.projectDir = projectDir;\n    this.projectObserver = projectObserver;\n    this.subscriptions = [];\n\n    this._sid = Math.random();\n    this._multienvTaskExplorer = false;\n    this._refreshTimeout = undefined;\n    this._startedTask = undefined;\n    this._tasksToRestore = [];\n    this._sbPortSwitcher = undefined;\n    this._customPort = getProjectItemState(projectDir, 'customPort');\n\n    this.refresh();\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  toggleMultiEnvExplorer() {\n    this._multienvTaskExplorer = !this._multienvTaskExplorer;\n    this.refresh({ force: true });\n  }\n\n  requestRefresh() {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n    this._refreshTimeout = setTimeout(\n      this.refresh.bind(this),\n      ProjectTaskManager.AUTO_REFRESH_DELAY,\n    );\n  }\n\n  async refresh({ force = false } = {}) {\n    this.dispose();\n\n    if (force) {\n      this.projectObserver.resetCache();\n      this._sid = Math.random();\n    }\n\n    const projectEnvs = (await this.projectObserver.getConfig()).envs();\n    const projectTasks = [...(await this.projectObserver.getDefaultTasks())];\n    for (const env of projectEnvs) {\n      projectTasks.push(...((await this.projectObserver.getLoadedEnvTasks(env)) || []));\n    }\n\n    const taskViewer = vscode.window.createTreeView(ProjectTaskManager.TASKS_VIEW_ID, {\n      treeDataProvider: new ProjectTasksTreeProvider(\n        this._sid,\n        projectEnvs,\n        projectTasks,\n        this.projectObserver.getSelectedEnv(),\n        this._multienvTaskExplorer,\n      ),\n      showCollapseAll: true,\n    });\n\n    this.subscriptions.push(\n      taskViewer,\n\n      // pre-fetch expanded env tasks\n      taskViewer.onDidExpandElement(async ({ element }) => {\n        if (element.env) {\n          await this.onDidRequestEnvTasks(element.env);\n        }\n      }),\n\n      // register VSCode Task Provider\n      vscode.tasks.registerTaskProvider(ProjectTaskManager.PROVIDER_TYPE, {\n        provideTasks: () => projectTasks.map((task) => this.toVSCodeTask(task)),\n        resolveTask: () => {\n          return undefined;\n        },\n      }),\n\n      vscode.tasks.onDidEndTaskProcess((event) => this.onDidEndTaskProcess(event)),\n    );\n\n    this.registerTaskBasedCommands(projectTasks);\n    this.registerPortSwitcher();\n    vscode.commands.executeCommand('setContext', 'pioProjectTasksReady', true);\n    vscode.commands.executeCommand(\n      'setContext',\n      'pioMultiEnvProject',\n      projectEnvs.length > 1,\n    );\n  }\n\n  async onDidRequestEnvTasks(name) {\n    if (await this.projectObserver.getLoadedEnvTasks(name)) {\n      return;\n    }\n    await this.projectObserver.loadEnvTasks(name);\n    return this.requestRefresh();\n  }\n\n  toVSCodeTask(projectTask) {\n    const envClone = Object.assign({}, process.env);\n    if (process.env.PLATFORMIO_PATH) {\n      envClone.PATH = process.env.PLATFORMIO_PATH;\n      envClone.Path = process.env.PLATFORMIO_PATH;\n    }\n    const vscodeTask = new vscode.Task(\n      {\n        type: ProjectTaskManager.PROVIDER_TYPE,\n        task: projectTask.id,\n      },\n      vscode.workspace.getWorkspaceFolder(vscode.Uri.file(this.projectDir)),\n      projectTask.id,\n      ProjectTaskManager.PROVIDER_TYPE,\n      new vscode.ProcessExecution(\n        IS_WINDOWS ? 'platformio.exe' : 'platformio',\n        projectTask.getCoreArgs({ port: this._customPort }),\n        {\n          cwd: this.projectDir,\n          env: envClone,\n        },\n      ),\n      '$platformio',\n    );\n    vscodeTask.presentationOptions = {\n      panel: vscode.TaskPanelKind.Dedicated,\n    };\n    if (projectTask.isBuild()) {\n      vscodeTask.group = vscode.TaskGroup.Build;\n    } else if (projectTask.isClean()) {\n      vscodeTask.group = vscode.TaskGroup.Clean;\n    } else if (projectTask.isTest()) {\n      vscodeTask.group = vscode.TaskGroup.Test;\n    }\n    return vscodeTask;\n  }\n\n  runTask(task) {\n    this._autoCloseSerialMonitor(task);\n    // use string-based task defination for Win 7 // issue #3481\n    vscode.commands.executeCommand(\n      'workbench.action.tasks.runTask',\n      `${ProjectTaskManager.PROVIDER_TYPE}: ${task.id}`,\n    );\n  }\n\n  async _autoCloseSerialMonitor(startedTask) {\n    this._startedTask = startedTask;\n    this._tasksToRestore = [];\n    const closeMonitorConds = [\n      extension.getConfiguration('autoCloseSerialMonitor'),\n      ['upload', 'test'].some((arg) =>\n        this.getTaskArgs(this._startedTask).includes(arg),\n      ),\n    ];\n    if (!closeMonitorConds.every((value) => value)) {\n      return;\n    }\n\n    // skip \"native\" dev-platform\n    // const platform = (await this.projectObserver.getConfig()).getEnvPlatform(\n    //   await this.projectObserver.revealActiveEnvironment()\n    // );\n    // if (platform === 'native') {\n    //   return;\n    // }\n\n    vscode.tasks.taskExecutions.forEach((event) => {\n      const isCurrentTask = this.areTasksEqual(this._startedTask, event.task);\n      const skipConds = [\n        // skip non-PlatformIO task\n        event.task.definition.type !== ProjectTaskManager.PROVIDER_TYPE,\n        !this.getTaskArgs(event.task).includes('monitor'),\n        this.isMonitorAndUploadTask(event.task) && !isCurrentTask,\n      ];\n      if (skipConds.some((value) => value)) {\n        return;\n      }\n      // do not restart the same tasks\n      if (!isCurrentTask) {\n        this._tasksToRestore.push(event.task);\n      }\n      event.terminate();\n    });\n  }\n\n  onDidEndTaskProcess(event) {\n    const skipConds = [\n      !this._startedTask,\n      !this.areTasksEqual(this._startedTask, event.execution.task),\n      event.exitCode !== 0,\n      !this._tasksToRestore.length,\n    ];\n    if (skipConds.some((value) => value)) {\n      return;\n    }\n    this._startedTask = undefined;\n    setTimeout(\n      () => {\n        while (this._tasksToRestore.length) {\n          vscode.tasks.executeTask(this._tasksToRestore.pop());\n        }\n      },\n      parseInt(extension.getConfiguration('reopenSerialMonitorDelay')),\n    );\n  }\n\n  getTaskArgs(task) {\n    return task.args || task.execution.args;\n  }\n\n  isMonitorAndUploadTask(task) {\n    const args = this.getTaskArgs(task);\n    return ['--target', 'upload', 'monitor'].every((arg) => args.includes(arg));\n  }\n\n  areTasksEqual(task1, task2) {\n    if (!task1 || !task2) {\n      return task1 === task2;\n    }\n    const args1 = this.getTaskArgs(task1);\n    const args2 = this.getTaskArgs(task2);\n    return (\n      args1.length === args2.length &&\n      args1.every((value, index) => value === args2[index])\n    );\n  }\n\n  registerTaskBasedCommands(tasks) {\n    const _runTask = (name) => {\n      const candidates = tasks.filter(\n        (task) =>\n          task.name === name && task.coreEnv === this.projectObserver.getSelectedEnv(),\n      );\n      this.runTask(candidates[0]);\n    };\n\n    this.subscriptions.push(\n      vscode.commands.registerCommand('platformio-ide.build', () => _runTask('Build')),\n      vscode.commands.registerCommand('platformio-ide.upload', () =>\n        _runTask('Upload'),\n      ),\n      vscode.commands.registerCommand('platformio-ide.uploadAndMonitor', () =>\n        _runTask('Upload and Monitor'),\n      ),\n      vscode.commands.registerCommand('platformio-ide.clean', () => _runTask('Clean')),\n      vscode.commands.registerCommand('platformio-ide.test', () => _runTask('Test')),\n      vscode.commands.registerCommand('platformio-ide.serialMonitor', () =>\n        _runTask('Monitor'),\n      ),\n    );\n  }\n\n  registerPortSwitcher() {\n    this._sbPortSwitcher = vscode.window.createStatusBarItem(\n      'pio-port-switcher',\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START,\n    );\n    this._sbPortSwitcher.name = 'PlatformIO: Port Switcher';\n    this._sbPortSwitcher.tooltip = 'Set upload/monitor/test port';\n    this._sbPortSwitcher.command = 'platformio-ide.setProjectPort';\n    this.switchPort(this._customPort);\n\n    this.subscriptions.push(\n      this._sbPortSwitcher,\n      vscode.commands.registerCommand('platformio-ide.setProjectPort', () =>\n        this.pickProjectPort(),\n      ),\n    );\n  }\n\n  async pickProjectPort() {\n    const serialPorts = await listCoreSerialPorts();\n    const pickedItem = await vscode.window.showQuickPick(\n      [\n        { label: 'Auto' },\n        ...serialPorts.map((port) => ({\n          label: port.port,\n          description: [port.description, port.hwid]\n            .filter((value) => !!value)\n            .join(' | '),\n        })),\n        { label: 'Custom...' },\n      ],\n      {\n        matchOnDescription: true,\n      },\n    );\n    if (!pickedItem) {\n      return;\n    }\n    if (pickedItem.label === 'Custom...') {\n      const value = await vscode.window.showInputBox({\n        title: 'Enter custom upload/monitor/test port',\n        placeHolder: 'Examples: COM3, /dev/ttyUSB*, 192.168.0.13, /media/disk',\n      });\n      if (!value) {\n        return;\n      }\n      this.switchPort(value.trim());\n    } else {\n      this.switchPort(pickedItem.label !== 'Auto' ? pickedItem.label : undefined);\n    }\n  }\n\n  switchPort(port = undefined) {\n    updateProjectItemState(this.projectDir, 'customPort', port);\n    this._customPort = port;\n    this._sbPortSwitcher.text = `$(plug) ${\n      this._customPort ? path.basename(this._customPort) : 'Auto'\n    }`;\n    this._sbPortSwitcher.show();\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport { disposeSubscriptions } from '../utils';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectTestManager {\n  constructor(projectDir) {\n    this.projectDir = projectDir;\n    this.controller = vscode.tests.createTestController(\n      'platformio-tests',\n      'PlatformIO Tests',\n    );\n    this.subscriptions = [this.controller];\n\n    this.controller.refreshHandler = this.refreshHandler.bind(this);\n    this.controller.resolveHandler = this.resolveHandler.bind(this);\n    this.controller.createRunProfile(\n      'Run Tests',\n      vscode.TestRunProfileKind.Run,\n      this.runHandler.bind(this),\n      true,\n    );\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async runCoreTestCommand(args) {\n    const jsonOutputPath = path.join(\n      pioNodeHelpers.core.getTmpDir(),\n      `test-list-${Math.round(Math.random() * 100000)}.json`,\n    );\n    let output = undefined;\n    let error = new Error();\n    try {\n      const envClone = Object.assign({}, process.env);\n      envClone['PLATFORMIO_FORCE_ANSI'] = 'true';\n      output = await pioNodeHelpers.core.getPIOCommandOutput(\n        ['test', ...args, '--json-output-path', jsonOutputPath],\n        {\n          projectDir: this.projectDir,\n          runInQueue: true,\n          spawnOptions: {\n            env: envClone,\n          },\n        },\n      );\n    } catch (err) {\n      error = err;\n    }\n    try {\n      await fs.access(jsonOutputPath);\n    } catch (err) {\n      throw error;\n    }\n\n    const data = await pioNodeHelpers.misc.loadJSON(jsonOutputPath);\n    await fs.unlink(jsonOutputPath); // cleanup\n    return [data, output || error.toString()];\n  }\n\n  async refreshHandler() {\n    this.controller.items.replace([]); // clear\n    await this.resolveTestSuites();\n  }\n\n  async resolveHandler(test) {\n    if (test) {\n      console.warn('Not Implemented');\n      return;\n    }\n    await this.resolveTestSuites();\n  }\n\n  async resolveTestSuites() {\n    try {\n      const [data] = await this.runCoreTestCommand(['--list-tests']);\n      const envToSuites = data.test_suites.reduce(\n        (result, item) =>\n          result.set(item.env_name, [...(result.get(item.env_name) || []), item]),\n        new Map(),\n      );\n      envToSuites.forEach((suites, envName) => {\n        const envSuite = this.controller.createTestItem(`env:${envName}`, envName);\n        envSuite.children.replace(\n          suites.map((suite) =>\n            this.controller.createTestItem(\n              `suite:${envName}/${suite.test_name}`,\n              suite.test_name,\n              suite.test_dir ? vscode.Uri.file(suite.test_dir) : undefined,\n            ),\n          ),\n        );\n        this.controller.items.add(envSuite);\n      });\n    } catch (err) {\n      console.error(err);\n      const item = this.controller.createTestItem(\n        'error',\n        'Error (expand for details)',\n      );\n      item.error = err.toString();\n      this.controller.items.add(item);\n    }\n  }\n\n  extractTestSuites(test) {\n    if (test.id.startsWith('suite:')) {\n      return [test];\n    } else if (test.id.startsWith('case:')) {\n      return [test.parent];\n    } else if (test.id.startsWith('env:')) {\n      return test.children;\n    }\n    return [];\n  }\n\n  async runHandler(request, token) {\n    const run = this.controller.createTestRun(request);\n    const queue = [];\n    const exclude = [];\n\n    if (request.include) {\n      request.include.forEach((test) =>\n        this.extractTestSuites(test).forEach((suite) =>\n          queue.includes(suite) ? undefined : queue.push(suite),\n        ),\n      );\n    } else {\n      this.controller.items.forEach((item) =>\n        item.children.forEach((suite) => queue.push(suite)),\n      );\n    }\n    if (request.exclude) {\n      request.exclude.forEach((test) =>\n        this.extractTestSuites(test).forEach((suite) => exclude.push(suite)),\n      );\n    }\n\n    while (queue.length > 0 && !token.isCancellationRequested) {\n      const suite = queue.pop();\n      if (exclude.includes(suite)) {\n        run.skipped(suite);\n        continue;\n      }\n      await this._runTestSuite(run, suite);\n    }\n    run.end();\n  }\n\n  async _runTestSuite(run, suite) {\n    const envName = suite.parent.label;\n    const testName = suite.label;\n    const startedAt = Date.now();\n    run.started(suite);\n    try {\n      const [data, output] = await this.runCoreTestCommand([\n        '--environment',\n        envName,\n        '--filter',\n        testName,\n      ]);\n      process.chdir(data.project_dir);\n      const result = data.test_suites.find(\n        (item) => item.env_name === envName && item.test_name === testName,\n      );\n\n      switch (result.status) {\n        case 'SKIPPED':\n          run.skipped(suite);\n          break;\n\n        case 'ERRORED':\n          run.failed(\n            suite,\n            new vscode.TestMessage(result.test_cases[0].exception),\n            Date.now() - startedAt,\n          );\n          break;\n\n        default:\n          this._processTestSuiteResult(run, suite, result, startedAt);\n          break;\n      }\n\n      run.appendOutput(output, undefined, suite);\n    } catch (err) {\n      run.appendOutput(err.toString(), undefined, suite);\n      run.failed(suite, new vscode.TestMessage(err.toString()), Date.now() - startedAt);\n    }\n  }\n\n  async _processTestSuiteResult(run, suite, result, startedAt) {\n    const envName = suite.parent.label;\n    const testName = suite.label;\n    suite.children.replace([]);\n    result.test_cases.forEach((testCase) => {\n      const test = this.controller.createTestItem(\n        `case:${envName}/${testName}/${testCase.name}`,\n        testCase.name,\n        testCase.source\n          ? vscode.Uri.file(path.resolve(testCase.source.file))\n          : undefined,\n      );\n      if (testCase.source && testCase.source.line) {\n        test.range = new vscode.Range(\n          testCase.source.line - 1,\n          0,\n          testCase.source.line - 1,\n          0,\n        );\n      }\n      suite.children.add(test);\n\n      switch (testCase.status) {\n        case 'SKIPPED':\n          run.skipped(test);\n          break;\n        case 'ERRORED':\n          run.failed(\n            test,\n            new vscode.TestMessage(testCase.exception),\n            Date.now() - startedAt,\n          );\n          break;\n        case 'FAILED':\n          run.failed(\n            test,\n            new vscode.TestMessage(testCase.message),\n            Date.now() - startedAt,\n          );\n          break;\n        default:\n          run.passed(test, Date.now() - startedAt);\n          break;\n      }\n\n      if (testCase.stdout) {\n        run.appendOutput(\n          testCase.stdout,\n          test.uri ? new vscode.Location(test.uri, test.range) : undefined,\n          test,\n        );\n      }\n    });\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport * as projectHelpers from './helpers';\n\nimport { disposeSubscriptions, notifyError } from '../utils';\nimport { ProjectConfigLanguageProvider } from './config';\nimport ProjectTaskManager from './tasks';\nimport ProjectTestManager from './tests';\nimport { STATUS_BAR_PRIORITY_START } from '../constants';\nimport { extension } from '../main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectManager {\n  CONFIG_CHANGED_DELAY = 3; // seconds\n\n  constructor() {\n    this._taskManager = undefined;\n    this._sbEnvSwitcher = undefined;\n    this._logOutputChannel = vscode.window.createOutputChannel(\n      'PlatformIO: Project Configuration',\n    );\n    this._configProvider = new ProjectConfigLanguageProvider();\n    this._configChangedTimeout = undefined;\n\n    this._pool = new pioNodeHelpers.project.ProjectPool({\n      ide: 'vscode',\n      api: {\n        logOutputChannel: this._logOutputChannel,\n        createFileSystemWatcher: vscode.workspace.createFileSystemWatcher,\n        createDirSystemWatcher: (dir) =>\n          vscode.workspace.createFileSystemWatcher(path.join(dir, '*')),\n        withIndexRebuildingProgress: (task) =>\n          vscode.window.withProgress(\n            {\n              location: { viewId: vscode.ProgressLocation.Notification },\n              title: 'PlatformIO: Configuring project',\n              cancellable: true,\n            },\n            async (progress, token) =>\n              await task(\n                (message, increment = undefined) =>\n                  progress.report({\n                    message,\n                    increment: increment,\n                  }),\n                token,\n              ),\n          ),\n        withTasksLoadingProgress: (task) =>\n          vscode.window.withProgress(\n            {\n              location: { viewId: ProjectTaskManager.TASKS_VIEW_ID },\n            },\n            async () =>\n              await vscode.window.withProgress(\n                {\n                  location: { viewId: vscode.ProgressLocation.Window },\n                  title: 'PlatformIO: Loading tasks...',\n                },\n                task,\n              ),\n          ),\n        onDidChangeProjectConfig: (configPath) => {\n          const projectDir = path.dirname(configPath);\n          if (this._configChangedTimeout) {\n            clearTimeout(this._configChangedTimeout);\n            this._configChangedTimeout = undefined;\n          }\n          this._configChangedTimeout = setTimeout(\n            () =>\n              this.switchToProject(projectDir, {\n                force: true,\n              }),\n            ProjectManager.CONFIG_CHANGED_DELAY * 1000,\n          );\n        },\n        onDidNotifyError: notifyError.bind(this),\n      },\n      settings: {\n        autoPreloadEnvTasks: extension.getConfiguration('autoPreloadEnvTasks'),\n        autoRebuild: extension.getConfiguration('autoRebuildAutocompleteIndex'),\n      },\n    });\n\n    this.subscriptions = [\n      this._pool,\n      this._logOutputChannel,\n      this._configProvider,\n      vscode.window.onDidChangeActiveTextEditor(() => {\n        if (!extension.getConfiguration('activateProjectOnTextEditorChange')) {\n          return;\n        }\n        const projectDir = projectHelpers.getActiveEditorProjectDir();\n        if (projectDir) {\n          this.switchToProject(projectDir);\n        }\n      }),\n      vscode.workspace.onDidChangeWorkspaceFolders(() =>\n        this.switchToProject(this.findActiveProjectDir()),\n      ),\n      vscode.commands.registerCommand('platformio-ide.rebuildProjectIndex', () =>\n        this._pool.getActiveObserver().rebuildIndex({ force: true }),\n      ),\n      vscode.commands.registerCommand('platformio-ide.refreshProjectTasks', () =>\n        this._taskManager.refresh({ force: true }),\n      ),\n      vscode.commands.registerCommand('platformio-ide.toggleMultiEnvProjectTasks', () =>\n        this._taskManager.toggleMultiEnvExplorer(),\n      ),\n      vscode.commands.registerCommand('platformio-ide._runProjectTask', (task) =>\n        this._taskManager.runTask(task),\n      ),\n      vscode.commands.registerCommand(\n        'platformio-ide.activeEnvironment',\n        async () => await this._pool.getActiveObserver().revealActiveEnvironment(),\n      ),\n    ];\n    this.internalSubscriptions = [];\n\n    this.registerEnvSwitcher();\n    // switch to the first project in a workspace on start-up\n    this.switchToProject(this.findActiveProjectDir(), { force: true });\n  }\n\n  dispose() {\n    this.disposeInternals();\n    disposeSubscriptions(this.internalSubscriptions);\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  findActiveProjectDir() {\n    let projectDir = undefined;\n    if (extension.getConfiguration('activateProjectOnTextEditorChange')) {\n      projectDir = projectHelpers.getActiveEditorProjectDir();\n    }\n    return projectDir || this.getSelectedProjectDir();\n  }\n\n  getSelectedProjectDir() {\n    const pioProjectDirs = projectHelpers.getPIOProjectDirs();\n    const currentActiveDir = this._pool.getActiveProjectDir();\n    if (pioProjectDirs.length < 1) {\n      return undefined;\n    }\n    if (\n      currentActiveDir &&\n      pioProjectDirs.find((projectDir) => projectDir === currentActiveDir)\n    ) {\n      return currentActiveDir;\n    }\n    const lastActiveDir = projectHelpers.getLastProjectDir();\n    if (\n      lastActiveDir &&\n      pioProjectDirs.find((projectDir) => projectDir === lastActiveDir)\n    ) {\n      return lastActiveDir;\n    }\n    return pioProjectDirs[0];\n  }\n\n  saveActiveProjectState() {\n    const observer = this._pool.getActiveObserver();\n    if (!observer) {\n      return;\n    }\n    projectHelpers.updateProjectItemState(\n      observer.projectDir,\n      'selectedEnv',\n      observer.getSelectedEnv(),\n    );\n  }\n\n  async switchToProject(projectDir, options = {}) {\n    if (!projectDir) {\n      console.error('switchProject => Please provide project folder');\n      return;\n    }\n    this._sbEnvSwitcher.text = '$(root-folder) Loading...';\n\n    let currentProjectDir = undefined;\n    let currentEnv = undefined;\n    if (this._pool.getActiveObserver()) {\n      currentProjectDir = this._pool.getActiveObserver().projectDir;\n      currentEnv = this._pool.getActiveObserver().getSelectedEnv();\n    }\n    const observer = this._pool.getObserver(projectDir);\n\n    // validate configuration file\n    const configUri = vscode.Uri.file(path.join(projectDir, 'platformio.ini'));\n    try {\n      const isConfigValid = await this._configProvider.lintConfig(configUri);\n      if (!isConfigValid) {\n        vscode.window.showErrorMessage(\n          'The project configuration process has encountered an error due to ' +\n            \"a problem with the 'platformio.ini' file. \" +\n            'Please review the file and fix the issues.',\n        );\n        vscode.window.showTextDocument(configUri);\n        return;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    if ('env' in options) {\n      await observer.switchProjectEnv(options.env);\n    } else if (!observer.getSelectedEnv()) {\n      await observer.switchProjectEnv(\n        projectHelpers.getProjectItemState(projectDir, 'selectedEnv'),\n      );\n    }\n\n    // ignore active project and & env\n    if (\n      options.force ||\n      !currentProjectDir ||\n      currentProjectDir !== projectDir ||\n      currentEnv !== observer.getSelectedEnv()\n    ) {\n      disposeSubscriptions(this.internalSubscriptions);\n      await this._pool.switch(projectDir);\n      this._taskManager = new ProjectTaskManager(projectDir, observer);\n      this.internalSubscriptions.push(\n        this._taskManager,\n        new ProjectTestManager(projectDir),\n      );\n\n      // open \"platformio.ini\" if no visible editors\n      if (\n        vscode.window.visibleTextEditors.length === 0 &&\n        extension.getConfiguration('autoOpenPlatformIOIniFile')\n      ) {\n        vscode.window.showTextDocument(\n          vscode.Uri.file(path.join(projectDir, 'platformio.ini')),\n        );\n      }\n    }\n\n    this.showSelectedEnv();\n    this.saveActiveProjectState();\n  }\n\n  registerEnvSwitcher() {\n    this._sbEnvSwitcher = vscode.window.createStatusBarItem(\n      'pio-env-switcher',\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START,\n    );\n    this._sbEnvSwitcher.name = 'PlatformIO: Project Environment Switcher';\n    this._sbEnvSwitcher.tooltip = 'Switch PlatformIO Project Environment';\n    this._sbEnvSwitcher.command = 'platformio-ide.pickProjectEnv';\n    this._sbEnvSwitcher.text = '$(root-folder) Loading...';\n    this._sbEnvSwitcher.show();\n\n    this.subscriptions.push(\n      this._sbEnvSwitcher,\n      vscode.commands.registerCommand('platformio-ide.pickProjectEnv', () =>\n        this.pickProjectEnv(),\n      ),\n    );\n  }\n\n  showSelectedEnv() {\n    const observer = this._pool.getActiveObserver();\n    if (!observer) {\n      return;\n    }\n    const env = observer.getSelectedEnv()\n      ? `env:${observer.getSelectedEnv()}`\n      : 'Default';\n    this._sbEnvSwitcher.text = `$(root-folder) ${env} (${path.basename(\n      observer.projectDir,\n    )})`;\n  }\n\n  async pickProjectEnv() {\n    const items = [];\n    for (const projectDir of projectHelpers.getPIOProjectDirs()) {\n      const observer = this._pool.getObserver(projectDir);\n      const envs = (await observer.getConfig()).envs();\n      if (!envs || !envs.length) {\n        continue;\n      }\n      const shortProjectDir = `${path.basename(\n        path.dirname(projectDir),\n      )}/${path.basename(projectDir)}`;\n      items.push({\n        projectDir,\n        label: 'Default',\n        description: `$(folder) ${shortProjectDir} (\"default_envs\" from \"platformio.ini\")`,\n      });\n      items.push(\n        ...envs.map((env) => ({\n          projectDir,\n          env,\n          label: `env:${env}`,\n          description: `$(folder) ${shortProjectDir}`,\n        })),\n      );\n    }\n    const pickedItem = await vscode.window.showQuickPick(items, {\n      matchOnDescription: true,\n    });\n    if (!pickedItem) {\n      return;\n    }\n    this.switchToProject(pickedItem.projectDir, { env: pickedItem.env, force: true });\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as vscode from 'vscode';\n\nclass QuickItem extends vscode.TreeItem {\n  constructor(label, command, args, collapsibleState, children) {\n    super(label, collapsibleState);\n    if (command) {\n      this.command = {\n        title: label,\n        command,\n        arguments: args,\n      };\n    }\n    this.customChildren = children;\n  }\n}\n\nexport default class QuickAccessTreeProvider {\n  getChildren(element) {\n    if (element && element.customChildren) {\n      return element.customChildren;\n    }\n    return [\n      new QuickItem(\n        'PIO Home',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Open', 'platformio-ide.showHome'),\n          new QuickItem('PIO Account', 'platformio-ide.showHome', ['/account']),\n          new QuickItem('Inspect', 'platformio-ide.showHome', ['/inspect']),\n          new QuickItem('Projects & Configuration', 'platformio-ide.showHome', [\n            '/projects',\n          ]),\n          new QuickItem('Libraries', 'platformio-ide.showHome', ['/libraries']),\n          new QuickItem('Boards', 'platformio-ide.showHome', ['/boards']),\n          new QuickItem('Platforms', 'platformio-ide.showHome', ['/platforms']),\n          new QuickItem('Devices', 'platformio-ide.showHome', ['/device']),\n        ],\n      ),\n      new QuickItem(\n        'Debug',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Start Debugging', 'platformio-ide.startDebugging'),\n          new QuickItem('Toggle Debug Console', 'workbench.debug.action.toggleRepl'),\n        ],\n      ),\n      new QuickItem(\n        'Miscellaneous',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem(\n            'Serial & UDP Plotter',\n            'workbench.extensions.action.showExtensionsWithIds',\n            [['alexnesnes.teleplot']],\n          ),\n          new QuickItem('PlatformIO Core CLI', 'platformio-ide.openPIOCoreCLI'),\n          new QuickItem('Clone Git Project', 'git.clone'),\n          new QuickItem('New Terminal', 'platformio-ide.newTerminal'),\n          new QuickItem('Upgrade PlatformIO Core', 'platformio-ide.upgradeCore'),\n          new QuickItem('Show Release Notes', 'platformio-ide.showReleaseNotes'),\n        ],\n      ),\n    ];\n  }\n\n  getTreeItem(element) {\n    return element;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as misc from './misc';\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport * as piodebug from 'platformio-vscode-debug';\nimport * as utils from './utils';\n\nimport InstallationManager from './installer/manager';\nimport PIOHome from './home';\nimport PIOReleaseNotes from './release-notes';\nimport PIOTerminal from './terminal';\nimport PIOToolbar from './toolbar';\nimport ProjectManager from './project/manager';\nimport QuickAccessTreeProvider from './views/quick-access-tree';\nimport fs from 'fs-plus';\nimport { getPIOProjectDirs } from './project/helpers';\nimport vscode from 'vscode';\n\nclass PlatformIOVSCodeExtension {\n  constructor() {\n    this.context = undefined;\n    this.pioTerm = undefined;\n    this.pioHome = undefined;\n    this.projectManager = undefined;\n    this.subscriptions = [];\n\n    this._enterpriseSettings = undefined;\n  }\n\n  async activate(context) {\n    this.context = context;\n    this.pioHome = new PIOHome();\n    this.pioTerm = new PIOTerminal();\n    this.subscriptions.push(this.pioHome, this.pioTerm, new PIOReleaseNotes());\n    const hasPIOProject = getPIOProjectDirs().length > 0;\n\n    // dump global state\n    console.info(\n      'PlatformIO IDE Global State',\n      context.globalState.keys().reduce((state, key) => {\n        state[key] = context.globalState.get(key);\n        return state;\n      }, {}),\n    );\n\n    // temporary workaround for https://github.com/Microsoft/vscode/issues/58348\n    if (\n      !vscode.workspace\n        .getConfiguration('extensions')\n        .has('showRecommendationsOnlyOnDemand')\n    ) {\n      vscode.workspace\n        .getConfiguration('extensions')\n        .update('showRecommendationsOnlyOnDemand', true);\n    }\n\n    this.patchOSEnviron();\n    await this.startInstaller(!hasPIOProject);\n    this.subscriptions.push(this.handleUseDevelopmentPIOCoreConfiguration());\n\n    vscode.commands.executeCommand('setContext', 'pioCoreReady', true);\n    if (typeof this.getEnterpriseSetting('onPIOCoreReady') === 'function') {\n      await this.getEnterpriseSetting('onPIOCoreReady')();\n    }\n\n    this.subscriptions.push(\n      vscode.window.registerTreeDataProvider(\n        'platformio-ide.quickAccess',\n        new QuickAccessTreeProvider(),\n      ),\n    );\n\n    this.registerGlobalCommands();\n\n    if (!hasPIOProject) {\n      this.subscriptions.push(\n        new PIOToolbar({ filterCommands: ['platformio-ide.showHome'] }),\n      );\n      return;\n    }\n\n    vscode.commands.executeCommand('setContext', 'pioProjectReady', true);\n    this.subscriptions.push(\n      new PIOToolbar({\n        ignoreCommands: this.getEnterpriseSetting('ignoreToolbarCommands'),\n      }),\n    );\n\n    this.initDebug();\n    this.projectManager = new ProjectManager();\n    this.subscriptions.push(this.projectManager);\n\n    this.startPIOHome();\n\n    misc.maybeRateExtension();\n    misc.warnAboutConflictedExtensions();\n    this.subscriptions.push(\n      vscode.window.onDidChangeActiveTextEditor((editor) =>\n        misc.warnAboutInoFile(editor),\n      ),\n    );\n  }\n\n  getConfiguration(id) {\n    return vscode.workspace.getConfiguration('platformio-ide').get(id);\n  }\n\n  loadEnterpriseSettings() {\n    const ext = vscode.extensions.all.find(\n      (item) =>\n        item.id.startsWith('platformio.') &&\n        item.id !== 'platformio.platformio-ide' &&\n        item.isActive,\n    );\n    return ext && ext.exports ? ext.exports.settings : undefined;\n  }\n\n  getEnterpriseSetting(id, defaultValue = undefined) {\n    if (!this._enterpriseSettings) {\n      this._enterpriseSettings = this.loadEnterpriseSettings();\n    }\n    if (this._enterpriseSettings && id in this._enterpriseSettings) {\n      return this._enterpriseSettings[id];\n    }\n    return defaultValue;\n  }\n\n  patchOSEnviron() {\n    const extraVars = {\n      PLATFORMIO_IDE: utils.getIDEVersion(),\n    };\n    // handle HTTP proxy settings\n    const http_proxy = vscode.workspace.getConfiguration('http').get('proxy');\n    if (http_proxy && !process.env.HTTP_PROXY && !process.env.http_proxy) {\n      extraVars['HTTP_PROXY'] = http_proxy;\n    }\n    if (http_proxy && !process.env.HTTPS_PROXY && !process.env.https_proxy) {\n      extraVars['HTTPS_PROXY'] = http_proxy;\n    }\n    if (!vscode.workspace.getConfiguration('http').get('proxyStrictSSL')) {\n      extraVars['PLATFORMIO_SETTING_ENABLE_PROXY_STRICT_SSL'] = 'false';\n    }\n    if (this.getConfiguration('customPyPiIndexUrl')) {\n      extraVars['PIP_INDEX_URL'] = this.getConfiguration('customPyPiIndexUrl');\n    }\n    pioNodeHelpers.proc.patchOSEnviron({\n      caller: 'vscode',\n      extraPath: this.getConfiguration('customPATH'),\n      extraVars,\n    });\n  }\n\n  async startInstaller(disableAutoUpdates) {\n    const im = new InstallationManager(disableAutoUpdates);\n    if (im.locked()) {\n      vscode.window.showInformationMessage(\n        'PlatformIO IDE installation has been suspended, because PlatformIO ' +\n          'IDE Installer is already started in another window.',\n      );\n      return;\n    }\n    const doInstall = await vscode.window.withProgress(\n      {\n        location: vscode.ProgressLocation.Window,\n        title: 'PlatformIO',\n      },\n      async (progress) => {\n        progress.report({\n          message: 'Initializing PlatformIO Core...',\n        });\n        try {\n          return !(await im.check());\n        } catch (err) {}\n        return true;\n      },\n    );\n\n    if (!doInstall) {\n      return;\n    }\n\n    return await vscode.window.withProgress(\n      {\n        location: vscode.ProgressLocation.Notification,\n        title: 'PlatformIO Installer',\n      },\n      async (progress) => {\n        progress.report({\n          message: 'Installing PlatformIO IDE...',\n        });\n        const outputChannel = vscode.window.createOutputChannel(\n          'PlatformIO Installation',\n        );\n        outputChannel.show();\n        outputChannel.appendLine('Installing PlatformIO IDE...');\n        outputChannel.appendLine(\n          'It may take a few minutes depending on your connection speed',\n        );\n        outputChannel.appendLine(\n          'Please do not close this window and do not ' +\n            'open other folders until this process is completed.',\n        );\n        outputChannel.appendLine(\n          '\\nDebugging information is available via VSCode > Help > Toggle Developer Tools > Console.',\n        );\n\n        try {\n          im.lock();\n          await im.install(progress);\n          outputChannel.appendLine('PlatformIO IDE installed successfully.\\n');\n          outputChannel.appendLine('Please restart VSCode.');\n          const action = 'Reload Now';\n          const selected = await vscode.window.showInformationMessage(\n            'PlatformIO IDE has been successfully installed! Please reload window',\n            action,\n          );\n          if (selected === action) {\n            vscode.commands.executeCommand('workbench.action.reloadWindow');\n          }\n        } catch (err) {\n          outputChannel.appendLine('Failed to install PlatformIO IDE.');\n          utils.notifyError('Installation Manager', err);\n        } finally {\n          im.unlock();\n        }\n\n        im.destroy();\n        return true;\n      },\n    );\n  }\n\n  async startPIOHome() {\n    if (\n      this.getConfiguration('disablePIOHomeStartup') ||\n      !pioNodeHelpers.home.showAtStartup('vscode')\n    ) {\n      return;\n    }\n    vscode.commands.executeCommand('platformio-ide.showHome');\n  }\n\n  registerGlobalCommands() {\n    this.subscriptions.push(\n      vscode.commands.registerCommand('platformio-ide.showHome', (startUrl) =>\n        this.pioHome.toggle(startUrl),\n      ),\n      vscode.commands.registerCommand('platformio-ide.newTerminal', () =>\n        this.pioTerm.new().show(),\n      ),\n      vscode.commands.registerCommand('platformio-ide.openPIOCoreCLI', () =>\n        this.pioTerm.sendText('pio --help'),\n      ),\n      vscode.commands.registerCommand('platformio-ide.runPIOCoreCommand', (cmd) =>\n        this.pioTerm.sendText(cmd),\n      ),\n      vscode.commands.registerCommand('platformio-ide.startDebugging', () => {\n        vscode.commands.executeCommand('workbench.view.debug');\n        vscode.commands.executeCommand('workbench.debug.action.toggleRepl');\n        vscode.commands.executeCommand('workbench.action.debug.start');\n      }),\n      vscode.commands.registerCommand('platformio-ide.upgradeCore', () =>\n        this.pioTerm.sendText('pio upgrade'),\n      ),\n    );\n  }\n\n  initDebug() {\n    piodebug.activate(this.context);\n  }\n\n  handleUseDevelopmentPIOCoreConfiguration() {\n    return vscode.workspace.onDidChangeConfiguration(async (e) => {\n      if (\n        !e.affectsConfiguration('platformio-ide.useDevelopmentPIOCore') ||\n        !this.getConfiguration('useBuiltinPIOCore')\n      ) {\n        return;\n      }\n      const envDir = pioNodeHelpers.core.getEnvDir();\n      if (!envDir || !fs.isDirectorySync(envDir)) {\n        return;\n      }\n      await PIOHome.shutdownAllServers();\n      await pioNodeHelpers.misc.sleep(2000);\n      try {\n        fs.removeSync(envDir);\n      } catch (err) {\n        console.warn(err);\n      }\n      vscode.window.showInformationMessage(\n        'Please restart VSCode to apply the changes.',\n      );\n    });\n  }\n\n  disposeLocalSubscriptions() {\n    vscode.commands.executeCommand('setContext', 'pioCoreReady', false);\n    vscode.commands.executeCommand('setContext', 'pioProjectReady', false);\n    utils.disposeSubscriptions(this.subscriptions);\n  }\n\n  deactivate() {\n    this.disposeLocalSubscriptions();\n  }\n}\n\nexport const extension = new PlatformIOVSCodeExtension();\n\nexport function activate(context) {\n  extension.activate(context);\n  return extension;\n}\n\nexport function deactivate() {\n  extension.deactivate();\n  piodebug.deactivate();\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { CONFLICTED_EXTENSION_IDS } from './constants';\nimport { extension } from './main';\nimport vscode from 'vscode';\n\nexport async function maybeRateExtension() {\n  const stateKey = 'rate-extension';\n  const askAfterSessionNums = 13;\n  let state = extension.context.globalState.get(stateKey);\n  if (state && state.done) {\n    return;\n  } else if (!state || !state.callCounter) {\n    state = {\n      callCounter: 0,\n      done: false,\n    };\n  }\n\n  state.callCounter += 1;\n  if (state.callCounter < askAfterSessionNums) {\n    extension.context.globalState.update(stateKey, state);\n    return;\n  }\n\n  const selectedItem = await vscode.window.showInformationMessage(\n    'If you enjoy using PlatformIO IDE for VSCode, would you mind taking a moment to rate it? ' +\n      'It will not take more than one minute. Thanks for your support!',\n    { title: 'Rate PlatformIO IDE Extension', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: false },\n    { title: 'No, Thanks', isCloseAffordance: true },\n  );\n\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'Rate PlatformIO IDE Extension':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/pio-vscode-rate'),\n      );\n      state.done = true;\n      break;\n    case 'No, Thanks':\n      state.done = true;\n      break;\n    default:\n      state.callCounter = 0;\n  }\n  extension.context.globalState.update(stateKey, state);\n}\n\nexport async function warnAboutConflictedExtensions() {\n  const conflicted = vscode.extensions.all.filter(\n    (ext) => ext.isActive && CONFLICTED_EXTENSION_IDS.includes(ext.id),\n  );\n  if (conflicted.length === 0) {\n    return;\n  }\n  const selectedItem = await vscode.window.showWarningMessage(\n    `Conflicted extensions with IntelliSense service were detected (${conflicted\n      .map((ext) => ext.packageJSON.displayName || ext.id)\n      .join(', ')}). ` +\n      'Code-completion, linting and navigation will not work properly. ' +\n      'Please disable or uninstall them (Menu > View > Extensions).',\n    { title: 'More details', isCloseAffordance: false },\n    { title: 'Uninstall conflicted', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: true },\n  );\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'More details':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/pio-vscode-conflicted-extensions'),\n      );\n      break;\n    case 'Uninstall conflicted':\n      conflicted.forEach((ext) => {\n        vscode.commands.executeCommand(\n          'workbench.extensions.uninstallExtension',\n          ext.id,\n        );\n      });\n      vscode.commands.executeCommand('workbench.action.reloadWindow');\n      break;\n  }\n}\n\nexport async function warnAboutInoFile(editor) {\n  if (!editor || !editor.document || !editor.document.fileName) {\n    return;\n  }\n  if (!editor.document.fileName.endsWith('.ino')) {\n    return;\n  }\n  const stateKey = 'ino-warn-disabled';\n  if (extension.context.globalState.get(stateKey)) {\n    return;\n  }\n\n  const selectedItem = await vscode.window.showWarningMessage(\n    'C/C++ IntelliSense service does not support .INO files. ' +\n      'It might lead to the spurious problems with code completion, linting, and debugging. ' +\n      'Please convert .INO sketch into the valid .CPP file.',\n    { title: 'Show instruction', isCloseAffordance: false },\n    { title: 'Do not show again', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: true },\n  );\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'Show instruction':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('https://bit.ly/convert-ino-to-cpp'),\n      );\n      break;\n    case 'Do not show again':\n      extension.context.globalState.update(stateKey, 1);\n      break;\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","IS_WINDOWS","process","platform","startsWith","IS_OSX","CONFLICTED_EXTENSION_IDS","require","disposeSubscriptions","subscriptions","length","pop","dispose","async","notifyError","title","err","description","stack","toString","ghbody","getIDEVersion","reportUrl","getErrorReportUrl","action","includes","showErrorMessage","substring","executeCommand","parse","console","error","getExtension","packageJSON","version","listCoreSerialPorts","output","getCorePythonCommandOutput","JSON","trim","map","item","undefined","isPIOProjectSync","projectDir","getPIOProjectDirs","workspaceFolders","folder","uri","fsPath","filter","getActiveEditorProjectDir","editor","activeTextEditor","resource","document","scheme","getWorkspaceFolder","getProjectItemState","extension","context","globalState","updateProjectItemState","projects","keys","update","PIOHome","static","constructor","this","_currentPanel","_lastStartUrl","defaultStartUrl","push","onDidChangeWorkspaceFolders","disposePanel","bind","shutdownAllServers","shutdownServer","onPanelDisposed","toggle","startUrl","column","viewColumn","webview","html","getWebviewContent","reveal","warn","newPanel","panel","createWebviewPanel","getEnterpriseSetting","One","enableScripts","retainContextWhenHidden","onDidDispose","iconPath","file","extensionPath","getLoadingContent","getTheme","getConfiguration","colorTheme","toLowerCase","ensureServerStarted","port","host","onIDECommand","theme","iframeId","sessionId","getFrontendUrl","start","workspace","command","params","onOpenProjectCommand","onOpenTextDocumentCommand","onGetPIOProjectDirs","projectManager","switchToProject","force","updateWorkspaceFolders","showTextDocument","path","gotoPosition","line","selection","revealRange","InCenter","PythonPrompt","STATUS_TRY_AGAIN","STATUS_ABORT","STATUS_CUSTOMEXE","prompt","selectedItem","showInformationMessage","isCloseAffordance","pythonExecutable","result","status","showInputBox","placeHolder","validateInput","InstallationManager","LOCK_TIMEOUT","LOCK_KEY","disableAutoUpdates","config","stages","PlatformIOCoreStage","getValue","setValue","onDidStatusChange","pioCoreVersionSpec","useBuiltinPython","useBuiltinPIOCore","useDevelopmentPIOCore","pythonPrompt","predownloadedPackageDir","locked","lock","Date","getTime","unlock","lockTime","parseInt","check","stage","install","progress","stageIncrementTotal","message","increment","report","destroy","PIOReleaseNotes","registerCommand","stateKey","logoSrc","asWebviewUri","releaseNotes","readReleaseNotes","changelogPath","contents","readFile","encoding","startsAt","indexOf","PIOTerminal","_instance","envClone","assign","env","PLATFORMIO_PATH","PATH","Path","createTerminal","name","sendText","text","exitStatus","new","show","ToolbarButton","tooltip","commands","ToolbarButtonCommands","from","createStatusBarItem","options","priority","Left","PIOToolbar","RUN_BUTTON_COMMANDS_ID","arguments","id","args","rawCommands","Array","isArray","filterCommands","ignoreCommands","getButtons","refresh","buttons","button","some","cmd","forEach","index","sbItem","onDidChangeConfiguration","e","affectsConfiguration","onButtonClick","i","_expandArgVariables","arg","matches","match","replace","ProjectConfigLanguageProvider","language","SCOPE_PLATFORMIO","SCOPE_ENV","diagnosticCollection","createDiagnosticCollection","registerHoverProvider","DOCUMENT_SELECTOR","provideHover","position","registerCompletionItemProvider","provideCompletionItems","token","onDidOpenTextDocument","lintConfig","onDidSaveTextDocument","_optionsCache","Map","_ports","clear","getOptions","configPath","has","set","renderOptionDocs","option","attrs","group","type","multiple","sysenvvar","choices","join","min","max","default","docs","appendCodeblock","appendMarkdown","scope","getScopeAt","getText","split","reverse","getOptionAt","lineNum","lineAt","optionName","find","isOptionValueLocation","sepPos","character","word","getWordRangeAtPosition","providePackageHover","rawValue","exec","pkgOwner","pkgName","pkgUrlParts","encodeURIComponent","qs","URLSearchParams","isInline","isCancellationRequested","provideCompletionValues","provideCompletionOptions","Field","documentation","provideCompletionPorts","provideCompletionBaudrates","provideTypedCompletionValues","values","defaultValue","EnumMember","preselect","createCustomCompletionValueItem","Value","insertText","sortText","setTimeout","items","detail","hwid","String","fromCharCode","errors","warnings","msg","Warning","uriDiagnostics","data","sourceUri","source","diagnostics","lineno","Error","ProjectTasksTreeProvider","envs","tasks","selectedEnv","multiEnvExplorer","multiEnvProject","getEnvTasks","cmpGroup","task","coreEnv","DEFAULT_ENV_NAME","multienv","getTreeItem","taskToTreeItem","treeItem","label","getChildren","element","getEnvChildren","getRootChildren","Collapsed","Expanded","envTasks","getTaskGroups","Folder","candidates","ProjectTaskManager","projectObserver","_sid","Math","random","_multienvTaskExplorer","_refreshTimeout","_startedTask","_tasksToRestore","_sbPortSwitcher","_customPort","toggleMultiEnvExplorer","requestRefresh","clearTimeout","AUTO_REFRESH_DELAY","resetCache","projectEnvs","getConfig","projectTasks","getDefaultTasks","getLoadedEnvTasks","taskViewer","createTreeView","TASKS_VIEW_ID","treeDataProvider","getSelectedEnv","showCollapseAll","onDidExpandElement","onDidRequestEnvTasks","registerTaskProvider","PROVIDER_TYPE","provideTasks","toVSCodeTask","resolveTask","onDidEndTaskProcess","event","registerTaskBasedCommands","registerPortSwitcher","loadEnvTasks","projectTask","vscodeTask","getCoreArgs","cwd","presentationOptions","Dedicated","isBuild","Build","isClean","Clean","isTest","Test","runTask","_autoCloseSerialMonitor","startedTask","getTaskArgs","every","taskExecutions","isCurrentTask","areTasksEqual","isMonitorAndUploadTask","terminate","execution","exitCode","executeTask","task1","task2","args1","args2","_runTask","switchPort","pickProjectPort","serialPorts","pickedItem","showQuickPick","matchOnDescription","ProjectTestManager","controller","createTestController","refreshHandler","resolveHandler","createRunProfile","Run","runHandler","runCoreTestCommand","jsonOutputPath","getTmpDir","round","getPIOCommandOutput","runInQueue","spawnOptions","access","loadJSON","unlink","resolveTestSuites","test","test_suites","reduce","env_name","suites","envName","envSuite","createTestItem","children","suite","test_name","test_dir","add","extractTestSuites","parent","request","run","createTestRun","queue","exclude","include","skipped","_runTestSuite","end","testName","startedAt","now","started","chdir","project_dir","failed","test_cases","exception","_processTestSuiteResult","appendOutput","testCase","range","passed","stdout","ProjectManager","CONFIG_CHANGED_DELAY","_taskManager","_sbEnvSwitcher","_logOutputChannel","createOutputChannel","_configProvider","_configChangedTimeout","_pool","ProjectPool","ide","api","logOutputChannel","createFileSystemWatcher","createDirSystemWatcher","dir","withIndexRebuildingProgress","withProgress","location","viewId","Notification","cancellable","withTasksLoadingProgress","Window","onDidChangeProjectConfig","onDidNotifyError","settings","autoPreloadEnvTasks","autoRebuild","onDidChangeActiveTextEditor","findActiveProjectDir","getActiveObserver","rebuildIndex","revealActiveEnvironment","internalSubscriptions","registerEnvSwitcher","disposeInternals","getSelectedProjectDir","pioProjectDirs","currentActiveDir","getActiveProjectDir","lastActiveDir","saveActiveProjectState","observer","currentProjectDir","currentEnv","getObserver","configUri","switchProjectEnv","switch","visibleTextEditors","showSelectedEnv","pickProjectEnv","shortProjectDir","QuickItem","collapsibleState","super","customChildren","QuickAccessTreeProvider","pioTerm","pioHome","_enterpriseSettings","activate","hasPIOProject","info","state","patchOSEnviron","startInstaller","handleUseDevelopmentPIOCoreConfiguration","registerTreeDataProvider","registerGlobalCommands","initDebug","startPIOHome","done","callCounter","conflicted","all","ext","isActive","showWarningMessage","displayName","fileName","endsWith","loadEnterpriseSettings","extraVars","PLATFORMIO_IDE","http_proxy","HTTP_PROXY","HTTPS_PROXY","https_proxy","caller","extraPath","im","outputChannel","appendLine","showAtStartup","envDir","getEnvDir","sleep","disposeLocalSubscriptions","deactivate"],"sourceRoot":""}